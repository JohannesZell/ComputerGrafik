shader MyPhongShading(normal Normal = N,                           
                       color AmbientColor = 1.0,
                       color DiffuseColor = 0.8,
                       color SpecularColor = 0.8,
                       float Shininess = 100,
                       vector LightPosWorld = 0.0,
                       output color SurfaceColor = 0.0)
{
    // create closure surface color with integrated diffusion function
    // SurfaceColor = BaseColor * diffuse(N);
    
    // transform normal vector into worldspace
    vector normalWorld = transform("world", Normal);
    normalWorld = normalize(normalWorld);
    
    // compute light direction between world position of light and world position of object
    // P is one of the global variables accessable in the Shader See Table 6.1 in OCL Specification
    vector l = LightPosWorld - transform("world", P);
    l = normalize(l);
    
    // compute truncated dot product between normal vector and light pos
    float nl = max(dot(normalWorld, l), 0);
    
    // viewing direction is I (See Table 6.1 on osl specs)
    vector viewWorld = transform("world", I);
    viewWorld = normalize(viewWorld);

    // compute half vector between light and viewing direction
    vector h = normalize(l + viewWorld);
    
    // compute truncated dot product between normal vector and lhalf vector
    float nh = max(dot(normalWorld, h), 0);
    
    // create surface color
    SurfaceColor =   AmbientColor + 
                    (DiffuseColor/M_PI ) * nl + 
                    (((Shininess + 8) / (8*M_PI))*SpecularColor) * pow(nh, Shininess);
}